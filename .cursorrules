# Cursor Rules for POS Printer Desktop Application

## 프로젝트 개요
- PySide6 기반 데스크톱 POS 프린터 애플리케이션
- Windows 환경에서 실행되는 GUI 애플리케이션
- Supabase 클라우드 데이터베이스 연동
- USB/COM/네트워크 프린터 지원
- 자동 업데이트 기능 포함

## 코딩 스타일
- Python 코드는 PEP 8 스타일 가이드를 따릅니다
- 함수와 클래스 이름은 snake_case를 사용합니다
- 클래스 이름은 PascalCase를 사용합니다
- 상수는 UPPER_SNAKE_CASE를 사용합니다
- 타입 힌트를 적극적으로 사용합니다

## 파일 구조
- 각 모듈은 단일 책임 원칙을 따릅니다
- GUI 관련 코드는 `src/gui/` 디렉토리에 배치합니다
- 프린터 관련 코드는 `src/printer/` 디렉토리에 배치합니다
- 데이터베이스 관련 코드는 `src/database/` 디렉토리에 배치합니다

## PySide6 GUI 개발 규칙
- QMainWindow를 메인 윈도우로 사용합니다
- QThread를 사용하여 백그라운드 작업을 처리합니다
- Signal/Slot 패턴을 적극 활용합니다
- GUI 업데이트는 메인 스레드에서만 수행합니다
- 위젯은 재사용 가능하도록 모듈화합니다
- 스타일시트는 별도 파일로 관리하거나 클래스 내에서 정의합니다

## 프린터 관련 규칙
- 프린터 연결 실패 시 재시도 로직을 구현합니다
- 영수증 템플릿은 별도 파일로 관리합니다
- 주문 데이터는 영구 저장소에 백업합니다
- 프린터 상태를 실시간으로 모니터링합니다
- 네트워크 연결이 불안정한 환경을 고려한 오프라인 모드를 지원합니다
- USB, COM, 네트워크 프린터 타입을 모두 지원합니다

## 데이터베이스 및 클라우드 연동
- Supabase 클라이언트는 싱글톤 패턴으로 관리합니다
- SQLite 로컬 캐시를 활용하여 오프라인 모드를 지원합니다
- 데이터 동기화 시 충돌 해결 로직을 구현합니다
- 민감한 정보는 환경 변수로 관리합니다

## 에러 처리 및 로깅
- 적절한 예외 처리를 구현합니다
- 사용자에게 명확한 에러 메시지를 제공합니다
- 로그 파일에 에러 정보를 기록합니다
- 에러 로거는 전역적으로 관리합니다
- 크래시 발생 시 자동 복구 메커니즘을 구현합니다

## 자동 업데이트 시스템
- GitHub Releases API를 활용한 자동 업데이트
- 백그라운드에서 업데이트 확인
- 사용자 승인 후 업데이트 적용
- 업데이트 실패 시 롤백 메커니즘

## Windows 환경 특화 규칙
- Windows 경로 구분자(\)를 사용합니다
- PowerShell 명령어를 활용합니다
- Windows 서비스로 실행 가능하도록 설계합니다
- Windows 레지스트리 설정을 고려합니다
- pywin32 라이브러리를 활용한 Windows API 연동
- PyInstaller를 사용한 실행 파일 빌드

## 보안
- 민감한 정보는 환경 변수나 설정 파일에 저장합니다
- 사용자 입력은 적절히 검증합니다
- API 키는 암호화하여 저장합니다
- 네트워크 통신은 HTTPS를 사용합니다

## 성능 최적화
- 메모리 누수 방지를 위한 적절한 리소스 해제
- 대용량 데이터 처리 시 페이지네이션 활용
- 이미지 및 리소스 파일의 효율적 관리
- 백그라운드 작업의 적절한 스레드 관리

## 테스트
- 새로운 기능에 대한 테스트 코드를 작성합니다
- GUI 테스트는 QTest 프레임워크를 활용합니다
- 프린터 기능은 모킹을 통한 테스트를 구현합니다
- 기존 기능 수정 시 관련 테스트를 업데이트합니다

## 배포 및 패키징
- PyInstaller를 사용한 단일 실행 파일 생성
- Windows 인스톨러 생성 (NSIS 또는 Inno Setup)
- 자동 업데이트를 위한 배포 스크립트
- 버전 관리는 semantic versioning을 따릅니다

## 문서화
- 모든 함수와 클래스에 docstring을 작성합니다
- 복잡한 로직에는 인라인 주석을 추가합니다
- README.md 파일을 최신 상태로 유지합니다
- 설치 가이드와 사용자 매뉴얼을 제공합니다

## 의존성 관리
- requirements.txt에 명시적 버전 지정
- 가상환경 사용 권장
- 보안 취약점이 있는 패키지 정기 업데이트
- 불필요한 의존성 제거

## 코드 품질
- 코드 리뷰를 통한 품질 관리
- 정적 분석 도구 활용 (pylint, flake8)
- 일관된 코드 스타일 유지
- 리팩토링을 통한 코드 개선 
    